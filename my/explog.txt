***实验1：gedgnn.txt
    日期：
    数据集：AIDS，测试图对140*100
    备注：
实验2：mygnn.txt（存在NTN模块错误）
    日期：
    数据集：AIDS，测试图对140*100
    备注：只根据预测的节点保留概率做mask
***实验3：result_GedGNN_AIDS_2403291148.txt
    日期：24-03-29 11:48
    数据集：AIDS，测试图对140*420
    备注：完整的测试集进行测试
实验4：result_MyGNN_AIDS_2403201935.txt（存在NTN模块错误）
    日期：24-03-20 19:35
    数据集：AIDS，测试图对140*100
    备注：根据预测的节点保留概率做mask，并做对齐和添加BCE权重
实验5：result_MyGNN_AIDS_2403210905.txt（存在NTN模块错误）
    日期：24-03-21 09:05
    数据集：AIDS，测试图对140*100
    备注：根据预测的节点保留概率做mask，并做对齐
实验6：result_MyGNN_AIDS_2404121053.txt
    日期：24-04-12 10:53
    数据集：AIDS，测试图对140*100
    备注：修复NTN模块错误后，只根据预测的节点保留概率做mask，没有对齐
实验7：result_MyGNN2_AIDS_2404121719.txt
    日期：24-04-12 17:19
    数据集：AIDS，测试图对140*100
    备注：对节点较少的图进行节点特征填充（随机），使图对节点数一致，
        通过Cross Matrix Model得到A_match，并用Gumbel-Sinkhorn算法
        得到近似一一对齐矩阵去预测GED，去掉了BCEloss
***实验8：result_GedGNN_AIDS_2404130954.txt
    日期：24-04-13 09:54
    数据集：AIDS，测试图对140*100
    备注：GEDGNN模型，去掉BCELOSS，与实验7做对比
实验9：result_MyGNN_AIDS_2404150925.txt
    日期：24-04-15 09:25
    数据集：AIDS，测试图对140*100
    备注：根据预测的节点保留概率做mask，并做对齐
实验10：result_MyGNN2_AIDS_2404151641.txt
    日期：24-04-15 16:41
    数据集：AIDS，测试图对140*100
    备注：对节点较少的图进行节点特征填充（0向量，这里与实验7不同），使图对节点数一致，
        通过Cross Matrix Model得到A_match，并用Gumbel-Sinkhorn算法
        得到近似一一对齐矩阵去预测GED，去掉了BCEloss
实验11：result_MyGNN2_AIDS_2404160931.txt
    日期：24-04-16 09:31
    数据集：AIDS，测试图对140*100
    备注：由于填充0向量后效果变差，重新进行实验7
实验12：result_MyGNN2_AIDS_2404181504.txt
    日期：24-04-18 15:04
    数据集：AIDS，测试图对140*100
    备注：将原图转化为线图，通过相同的步骤得到边匹配矩阵，然后结合点匹配矩阵，
        通过自创的算法得到node_alignment, 用node_alignment代替原来的A_match与A_cost相乘得到GED
实验13：result_MyGNN2_AIDS_2404221022.txt（效果很差）
    日期：24-04-22 10:22
    数据集：AIDS，测试图对140*100
    备注：在实验12的基础上，把把A_cost的计算模块替换成欧氏距离
实验14：result_MyGNN2_AIDS_2404221501.txt（效果很差）
    日期：24-04-22 15:01
    数据集：AIDS，测试图对140*100
    备注：在实验12的基础上，把A_cost去掉, 只计算A_match, 节点对齐结果直接与A_match相乘计算GED
实验15：result_MyGNN2_AIDS_2404221741.txt
    日期：24-04-22 17:41
    数据集：AIDS，测试图对140*100
    备注：对节点较少的图进行节点特征填充(填充0向量)，只计算A_match(去掉A_cost), 用gumbel-Sinkhorn算法
        从A_match中得到node_alignment，用A_match*node_alignment计算GED。
实验16：result_MyGNN2_AIDS_2404231026.txt
    日期：24-04-23 10:26
    数据集：AIDS，测试图对140*100
    备注：使用实验15的框架，但将原本的图替换为边图，即使用边嵌入来预测GED
实验17：result_MyGNN2_AIDS_2404251410.txt（效果很差）
    日期：24-04-25 14:10
    数据集：AIDS，测试图对140*100
    备注：两条线路: 节点相似度矩阵和边相似度矩阵 -> 自己的对齐算法(不可微) -> M -> 节点相似度矩阵*M -> GEDLoss
                   边相似度矩阵(需填充) -> gumbel_sinkhorn(可微) -> M_edge -> 边相似度矩阵*M_edge -> GEDLoss
实验18：result_MyGNN2_AIDS_2404251736.txt
    日期：24-04-25 17:36
    数据集：AIDS，测试图对140*100
    备注：两条线路: 节点相似度矩阵(需填充) -> gumbel_sinkhorn(可微) -> M -> 节点相似度矩阵*M -> GEDLoss
                   边相似度矩阵(需填充) -> gumbel_sinkhorn(可微) -> M_edge -> 边相似度矩阵*M_edge -> GEDLoss
实验19：result_MyGNN2_AIDS_2405061035.txt
    日期：24-05-06 10:35
    数据集：AIDS，测试图对140*100
    备注：embedding -> Cross -> A_match
          embedding -> LRL+GS -> P 
          A_match*P -> GEDLoss
***实验20：result_MyGNN2_AIDS_2405071045.txt
    日期：24-05-07 10:45
    数据集：AIDS，测试图对140*100
    备注：根据IOSNET模型的LRL操作，在实验19的基础上，对填充操作进行了修改，在得到嵌入后在进行填充，并对A_match进行mask操作
            消除填充操作产生的影响。
实验21：result_MyGNN2_AIDS_2405081013.txt
    日期：24-05-08 10:13
    数据集：AIDS，测试图对140*100
    备注：实验19的方法，但同时对节点（原图）和边（线图）进行，其中节点部分的gumbel_sinkhorn噪声添加了
            由节点相似度矩阵A_node和边相似度矩阵A_edge得到的偏置(自己算法得到的节点对齐结果)
x实验22：result_MyGNN2_AIDS_2405101721.txt（对齐算法错误，在修改为取最小值时大许多地方没有修改）
    日期：24-05-10 17:21
    数据集：AIDS，测试图对140*100
    备注：实验21的基础上，在得到偏置的算法中，将每次取最大值改为每次取最小值
实验23：result_MyGNN3_AIDS_2405111337.txt
    日期：24-05-11 17:21
    数据集：AIDS，测试图对140*100
    备注：对原图（节点）和线图（边）用共享参数的GNN计算出节点嵌入和边嵌入，节点嵌入和边嵌入分别使用GEDGNN的过程得到score，
            最终的score是两者相加取平均。
***实验24：result_GedGNN_AIDS_2405131527.txt
    日期：24-05-13 15:27
    数据集：AIDS，测试图对140*100
    备注：去掉BCELOSS的GEDGNN模型25轮
实验25：result_MyGNN2_AIDS_2405151637.txt
    日期：24-05-15 16:37
    数据集：AIDS，测试图对140*100
    备注：实验21的基础上，线图部分去预测GED的流程替换成其他模型(先改成SimGNN)，
            替换的模型只要能够优化边嵌入和生成边相似度矩阵(辅助节点对齐)即可，
实验26：result_MyGNN2_AIDS_2405161553.txt
    日期：24-05-16 15:53
    数据集：AIDS，测试图对140*100
    备注：实验22修改错误后在运行
实验27：result_MyGNN2_AIDS_2405271805.txt
    日期：24-05-27 18:05
    数据集：AIDS，测试图对140*100
    备注：实验21的基础上修改偏置的权重
实验28：result_MyGNN3_AIDS_2406141502.txt
    日期：24-06-14 15:02
    数据集：AIDS，测试图对140*100
    备注：在实验20的基础上，根据对齐结果交换两张图中的对齐节点的one-hot特征，再输入到参数共享的GNN中得到节点嵌入并计算节点相似度矩阵，
        与得到对齐结果的矩阵做CEloss
实验29：result_MyGNN3_AIDS_2406170958.txt
    日期：24-06-17~20
    数据集：AIDS，测试图对140*100
    备注：在实验28的基础上，修改“交换节点的比例”和“CEloss的权重”。用了softmax
    节点比例    GED权重     CE权重       实验结果                  最佳结果    第15轮结果     备注
    0.6        10          0.05        MyGNN3_AIDS_2406170958     0.611       0.592
    0.6        10          0.07        MyGNN3_AIDS_2406180943     0.636       0.634
    0.6        10          0.09        MyGNN3_AIDS_2406190913     0.624       0.624       从第6到15轮CEloss就在146-148之间徘徊，而GEDloss一直都在下降46->38
    0.4        10          0.07        MyGNN3_AIDS_2406200919     0.618       0.618
实验30：result_MyGNN3_AIDS_2406211404.txt
    日期：24-06-21~25
    数据集：AIDS，测试图对140*100
    备注：在实验20的基础上，根据对齐结果交换两张图中的对齐节点的Node Embedding，再输入到参数共享的GNN中得到新的Node Embedding，
        并通过参数共享的costMatrixModule计算Cost矩阵，与原本的做CEloss。【对做CELoss的Cost矩阵用softmax、不裁剪0值】
    节点比例    GED权重     CE权重       实验结果                  最佳结果     最后一轮结果     备注
    0.6        10          0.07        MyGNN3_AIDS_2406211404    16/0.679      20/0.674
    0.6        10          0.2         MyGNN3_AIDS_2406241651    20/0.673      20/0.673
    0.6        10          1.0         MyGNN3_AIDS_2406250916    02/0.543      11/0.32
实验31：
    日期：24-06-26~28
    数据集：AIDS，测试图对140*100
    备注：在实验20的基础上，根据对齐结果交换两张图中的对齐节点的Node Embedding，将交换后的Node embedding加上原先的onehot-feature。
        再输入到参数共享的GNN中得到新的Node Embedding，并通过参数共享的costMatrixModule计算Cost矩阵，
        与原本的Cost矩阵做MSEloss。【对做MSELoss的Cost矩阵不用softmax、并裁剪0值】
    节点比例    GED权重     MSE权重       实验结果                   最佳结果     最后一轮结果     备注
    0.6        10          10.0         MyGNN3_AIDS_2406261328     15/0.659    15/0.659
    0.6        10          50.0         MyGNN3_AIDS_2406261653     8/0.61      10/0.607
    0.6        10          2.0          MyGNN3_AIDS_2406281226     15/0.659    15/0.659
                                               baseline            15/0.67     15/0.67
实验32：
    日期：24-07-01~08
    数据集：AIDS，测试图对140*100
    备注：在实验20的基础上，GNN从3层变成4层，同时每一层中加上AReg正则化；使用无参数的欧式距离进行正则化和计算cost矩阵。
    正则化损失函数  L1 = [D(N1, G1) - D(N1, G2) + margin]+
                   L2 = [D(N2, G2) - D(N2, G1) + margin]+
                   L = 1/N ∑ (L1+L2)
    GED权重     REG权重/margin      实验结果                   最佳结果     最后一轮结果     备注
    1.0          1.0/1.0          MyGNN3_AIDS_2407021520      3/0.422      3/0.422        最后一层做正则化，Cross计算Cost，欧式距离进行正则化
    10.0         5.0/0.2          MyGNN3_AIDS_2407051002      2/0.361      2/0.361        最后一层做正则化，余弦相似度计算Cost，余弦相似度进行正则化
    10.0         5.0/0.2          MyGNN3_AIDS_2407081151      1/0.396      3/0.379        最后一层做正则化，余弦相似度计算Cost，余弦相似度进行正则化，因为是相似度，减号前后调换
    10.0         10.0/1.0         MyGNN3_AIDS_2407051412      3/0.408      3/0.408        最后一层做AReg（按论文描述），Cross计算Cost
                                        baseline              15/0.67      15/0.67
实验33：result_GedGNN_AIDS_2407031103.txt
    日期：24-07-03 11:03
    数据集：AIDS，测试图对140*100
    备注：GEDGNN去掉BCELoss和NTN模块
实验34：result_GedGNN_AIDS_2407031559.txt
    日期：24-07-03 15:59
    数据集：AIDS，测试图对140*100
    备注：重做实验8(去掉BCELoss)
实验35：result_MyGNN2_AIDS_2407041345.txt
    日期：24-07-04 13:45
    数据集：AIDS，测试图对140*100
    备注：重新进行一次实验20
实验36：
    日期：24-07-12~15
    数据集：AIDS，测试图对140*100
    备注：对最后一层输出做ERIC的AReg（按源码描述）
    GED权重     AReg权重      实验结果                   最佳结果     最后一轮结果     备注
    10.0         2.0         MyGNN3_AIDS_2407121121     1/0.379      1/0.379        固定权重，第一轮效果不行pass
    10.0         param       MyGNN3_AIDS_2407121411     1/0.548      2/0.421        可变权重，第二轮效果下降太多pass
    1.0          param       MyGNN3_AIDS_2407151032     1/0.506      10/0.4         可变权重，ARegLoss为负值，第二轮开始变得很小，导致效果一直在下降
                                  baseline              15/0.67      15/0.67
实验37：result_MyGNN3_AIDS_2407191711
    日期：24-07-19 17:11
    数据集：AIDS，测试图对140*100
    说明：节点嵌入通过LRL处理节点嵌入, 通过Cross生成Cost矩阵, 用Cost矩阵通过gs得到Alignment矩阵 
实验38：result_MyGNN3_AIDS_2407231500
    日期：24-07-23 15:00
    数据集：AIDS，测试图对140*100
    参数：costMatrix(k=16)、LRL(hiddim=32)
    说明：在实验20的基础上，使用多层拼接的节点嵌入(128+64+32=224)
实验39：result_MyGNN3_AIDS_2407251335
    日期：24-07-25 13:35
    数据集：AIDS，测试图对140*420
    参数：costMatrix(k=16)、LRL(hiddim=32)
    说明：在实验20的基础上，使用完整的测试数据集
实验40：result_MyGNN3_AIDS_2407261038
    日期：24-07-26 10:38
    数据集：AIDS，测试图对140*100
    参数：costMatrix(k=16)、LRL(hiddim=32)
    说明：在实验20的基础上，score的计算方式: sigmoid(score + sim_score) 
                                        -> alpha*sigmoid(score) + beta*sigmoid(sim_score) 
实验41：result_MyGNN3_AIDS_2407261217
    日期：24-07-26 12:17
    数据集：AIDS，测试图对140*100
    参数：costMatrix(k=16)、LRL(hiddim=32)
    说明：重新进行一次实验20 (Cross和LRL换种写法，思路和参数都没变，想看看是否有影响)

       2  3  4  5  6  7  8  9  10   均值
0.8    1  2  3  4  4  5  6  7  8    0.714       
0.7    1  2  2  3  4  4  5  6  7    0.611
0.6    1  1  2  3  3  4  4  5  6    0.518
0.5    1  1  2  2  3  3  4  4  5    0.456
0.4    0  1  1  2  2  2  3  3  4    0.301

实验计划：

结论：
1、从节点相似度矩阵A_node和边相似度矩阵A_edge中通过自己的对齐算法(不可微)得到的对齐结果M，然后A_node*M去预测GED效果会很差
2、实验15(node)、16(edge)、18(node和edge)因为使用相同的方法可以进行对比
----------------------------------------

实验结果1：match_MyGNN_AIDS_2403210905.txt
    日期：24-03-21 09:05
    数据集：AIDS，测试图对140*100
    备注：保存测试时每个图对的实际对齐节点数量
        图1id，图2id，图1节点数，gt_ged, 图2节点数，实际节点对齐数量
实验结果2：sample_MyGNN_AIDS_2403201912.txt
    日期：24-03-20 19:12
    数据集：AIDS，测试图对140*420
    备注：每个batch的第一个图对的预测对齐结果和ground-truth
