count = 1
1319 7946
原图边索引: tensor([[7, 7, 3, 5, 8, 6, 1, 1, 0, 6, 9, 0, 2, 6, 4, 0, 4, 2, 0, 1, 2, 3, 4, 5,
         6, 7, 8, 9],
        [6, 9, 0, 2, 6, 4, 0, 4, 2, 7, 7, 3, 5, 8, 6, 1, 1, 0, 0, 1, 2, 3, 4, 5,
         6, 7, 8, 9]])
去除自环和反向对的原图边索引: tensor([[7, 7, 3, 5, 8, 6, 1, 1, 0],
        [6, 9, 0, 2, 6, 4, 0, 4, 2]])
原图边索引: tensor([[7, 7, 3, 5, 8, 8, 6, 1, 0, 4, 5, 9, 1, 2, 6, 9, 2, 0, 2, 2, 0, 1, 2, 3,
         4, 5, 6, 7, 8, 9],
        [5, 9, 1, 2, 6, 9, 2, 0, 2, 2, 7, 7, 3, 5, 8, 8, 6, 1, 0, 4, 0, 1, 2, 3,
         4, 5, 6, 7, 8, 9]])
去除自环和反向对的原图边索引: tensor([[7, 7, 3, 5, 8, 8, 6, 1, 0, 4],
        [5, 9, 1, 2, 6, 9, 2, 0, 2, 2]])

n1 = 10
n2 = 10
edge_index_1.shape = torch.Size([2, 28])
edge_index_2.shape = torch.Size([2, 30])
features_1.shape = torch.Size([10, 29])
features_2.shape = torch.Size([10, 29])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
lg_n1 = 9
lg_n2 = 10
lg_edge_index_mapping_1.shape = torch.Size([2, 29])
lg_edge_index_mapping_2.shape = torch.Size([2, 36])
lg_features_1.shape = torch.Size([9, 29])
lg_features_2.shape = torch.Size([10, 29])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])

map_matrix.shape = torch.Size([10, 10])
map_matrix:
 tensor([[-0.0394,  0.0425, -0.0215,  0.0550, -0.0465,  0.0153, -0.0234, -0.0965,
         -0.0308,  0.0070],
        [-0.1021, -0.0957, -0.0578,  0.0621,  0.0589,  0.0726, -0.0136, -0.0146,
         -0.0358,  0.0103],
        [-0.0809, -0.0440, -0.0636, -0.0335, -0.0148, -0.1079,  0.0277,  0.0118,
          0.1434,  0.0103],
        [ 0.0564,  0.0160,  0.0788,  0.0755, -0.0562,  0.0761, -0.0256, -0.1686,
         -0.1192, -0.1525],
        [-0.2019, -0.0817, -0.0930,  0.0271,  0.1340,  0.1031, -0.0897, -0.0119,
         -0.0482,  0.0337],
        [-0.0381, -0.0937, -0.0806, -0.0875,  0.0228, -0.1356,  0.0295,  0.0703,
          0.2456,  0.1227],
        [-0.0874, -0.0379, -0.0138, -0.0451,  0.1047, -0.0271,  0.0116, -0.0387,
         -0.0685, -0.0694],
        [ 0.0227,  0.0108, -0.0401, -0.0810,  0.0944, -0.1005, -0.0645, -0.0490,
         -0.0509, -0.0110],
        [ 0.0779, -0.0304,  0.2537, -0.0210, -0.0379,  0.0906,  0.1465, -0.1233,
         -0.1097, -0.0767],
        [ 0.0215,  0.0300, -0.0939, -0.0212,  0.0304, -0.0913, -0.0786, -0.0145,
          0.0259,  0.0436]], grad_fn=<ViewBackward0>)
lg_map_matrix.shape = torch.Size([9, 10])
lg_map_matrix:
 tensor([[ 4.4227e-02, -5.3763e-03,  1.4442e-02, -6.5092e-02, -3.7788e-02,
          3.5566e-02,  5.0880e-02,  2.7730e-02, -1.4931e-02,  1.5199e-02],
        [-1.9725e-01, -1.1969e-01, -1.0540e-02, -1.1391e-01, -6.3344e-02,
         -1.4565e-01,  4.7360e-02,  3.3588e-02, -3.7085e-02, -2.2343e-02],
        [-1.3896e-01, -3.4259e-02, -7.7594e-02, -9.2586e-02, -4.2214e-02,
         -4.7357e-02,  5.1078e-03, -1.5113e-02, -4.3402e-03,  1.7066e-02],
        [-1.5197e-02,  7.1741e-02,  8.2166e-02, -1.0995e-01, -2.4604e-02,
          2.9905e-02, -8.6891e-03, -2.3361e-03,  4.7056e-03,  4.9495e-03],
        [ 2.8093e-02, -8.2895e-02, -2.3440e-02, -4.3444e-05, -6.1192e-02,
          2.3849e-02,  2.8441e-02,  4.2315e-02,  9.3669e-03,  1.4270e-02],
        [-7.0756e-02,  6.1008e-02,  1.5321e-02,  2.8047e-02,  8.3297e-02,
          2.7807e-04, -2.7344e-02, -8.2312e-02, -5.3006e-02, -5.1278e-02],
        [-4.3646e-02,  7.6617e-02,  5.2701e-03, -4.8530e-03, -2.7963e-03,
          3.3025e-04,  9.8662e-03,  8.8401e-06,  3.9661e-03, -3.8439e-04],
        [-5.4192e-02, -2.4841e-02, -4.5707e-02, -1.2282e-02, -1.3363e-02,
          2.5577e-03,  8.1547e-04, -6.4042e-04,  4.0401e-02,  5.0267e-02],
        [-1.6261e-02,  1.2292e-02, -4.1384e-02,  2.2336e-02,  5.4203e-02,
         -3.0886e-02, -7.0623e-02, -7.9829e-02, -4.9023e-02, -2.8959e-02]],
       grad_fn=<ViewBackward0>)
原图节点对x: 8 2
边图节点对z: (6, 8) (2, 6)
原图节点对y: 6 6
原图节点对x: 5 8
边图节点对z: (5, 2) (8, 6)
原图节点对y: 2 6
原图节点对x: 4 4
边图节点对z: (6, 4) (2, 4)
原图节点对y: 6 2
原图节点对x: 3 5
边图节点对z: (3, 0) (7, 5)
原图节点对y: 0 7
原图节点对x: 1 3
边图节点对z: (4, 1) (3, 1)
原图节点对y: 4 1
原图节点对x: 9 9
边图节点对z: (7, 9) (7, 9)
原图节点对y: 7 7
原图节点对x: 7 0
边图节点对z: (7, 6) (2, 0)
原图节点对y: 6 2
原图节点对x: 2 1
节点对齐结果: [[8, 2], [6, 6], [5, 8], [4, 4], [3, 5], [0, 7], [1, 3], [9, 9], [7, 0], [2, 1]]
map_matrix.shape = torch.Size([10, 10])
节点对齐矩阵:
 tensor([[0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]],
       grad_fn=<AsStridedBackward0>)
------------------------------------------------------------------------


count = 2
3063 8889
原图边索引: tensor([[7, 3, 5, 8, 6, 1, 0, 0, 2, 0, 1, 2, 1, 0, 4, 2, 0, 1, 2, 3, 4, 5, 6, 7,
         8],
        [2, 0, 1, 2, 1, 0, 4, 2, 7, 3, 5, 8, 6, 1, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7,
         8]])
去除自环和反向对的原图边索引: tensor([[7, 3, 5, 8, 6, 1, 0, 0],
        [2, 0, 1, 2, 1, 0, 4, 2]])
原图边索引: tensor([[7, 7, 3, 3, 5, 5, 6, 6, 1, 1, 4, 8, 4, 1, 6, 8, 2, 4, 9, 0, 2, 2, 0, 1,
         2, 3, 4, 5, 6, 7, 8, 9],
        [8, 4, 1, 6, 8, 2, 4, 9, 0, 2, 2, 7, 7, 3, 3, 5, 5, 6, 6, 1, 1, 4, 0, 1,
         2, 3, 4, 5, 6, 7, 8, 9]])
去除自环和反向对的原图边索引: tensor([[7, 7, 3, 3, 5, 5, 6, 6, 1, 1, 4],
        [8, 4, 1, 6, 8, 2, 4, 9, 0, 2, 2]])
 
n1 = 9
n2 = 10
edge_index_1.shape = torch.Size([2, 25])
edge_index_2.shape = torch.Size([2, 32])
features_1.shape = torch.Size([9, 29])
features_2.shape = torch.Size([10, 29])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
lg_n1 = 8
lg_n2 = 11
lg_edge_index_mapping_1.shape = torch.Size([2, 32])
lg_edge_index_mapping_2.shape = torch.Size([2, 43])
lg_features_1.shape = torch.Size([8, 29])
lg_features_2.shape = torch.Size([11, 29])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])

map_matrix.shape = torch.Size([9, 10])
map_matrix:
 tensor([[-4.7731e-02, -5.8135e-02,  1.4917e-01, -5.7412e-02,  1.0983e-01,
          1.1076e-02, -7.3654e-02,  9.7319e-02,  2.3740e-02,  4.2031e-02],
        [-2.4769e-02, -9.9785e-03, -1.8787e-02,  3.1284e-02,  6.5854e-02,
         -5.6066e-02,  3.3515e-02, -2.2692e-02, -6.9946e-02, -3.4108e-02],
        [-1.7440e-02, -6.5791e-02,  6.3159e-03, -5.0025e-02, -8.6900e-02,
          8.0895e-02, -7.6797e-02, -2.9308e-02,  8.4776e-02,  7.0968e-02],
        [-8.6373e-02, -5.7301e-02, -2.5182e-02,  9.9690e-03, -5.5561e-02,
         -1.7234e-02, -8.1675e-02,  1.4359e-04, -1.8171e-02, -7.2815e-02],
        [ 1.7789e-02,  7.1922e-02, -3.9157e-02, -9.1235e-02, -8.3152e-02,
         -4.5134e-02, -1.9176e-01,  1.7806e-02, -6.7492e-03,  3.3686e-03],
        [-8.3867e-02, -1.0129e-02,  2.5599e-02,  2.7179e-02,  5.8054e-03,
          1.1940e-02,  1.2686e-01, -7.2937e-02, -4.5099e-02, -1.1354e-01],
        [ 6.1928e-02,  4.5346e-02, -2.1925e-02,  5.6590e-02, -6.9372e-02,
         -9.3311e-02,  1.0413e-01, -2.5188e-02, -4.7410e-02, -6.3782e-02],
        [-1.0087e-01, -2.8524e-02, -1.2959e-01,  4.0090e-02, -1.9834e-02,
          3.8246e-02, -6.1550e-03, -7.0062e-02,  1.6116e-01, -3.5476e-02],
        [ 9.2009e-02,  3.9393e-03,  3.5338e-02, -3.2460e-02, -5.1179e-02,
         -6.7407e-02, -4.7459e-02, -7.2433e-02, -9.8881e-02,  2.4556e-01]],
       grad_fn=<ViewBackward0>)
lg_map_matrix.shape = torch.Size([8, 11])
lg_map_matrix:
 tensor([[-0.1160,  0.0304, -0.0351,  0.0272,  0.0169,  0.0027, -0.0415,  0.0416,
          0.0197, -0.1256, -0.0821],
        [ 0.0691, -0.0319, -0.0362, -0.0396, -0.0019,  0.0235,  0.0270, -0.0239,
          0.0124,  0.0109,  0.0574],
        [ 0.0116, -0.0406, -0.0082, -0.0368, -0.0157, -0.0741,  0.0321,  0.0156,
         -0.0152,  0.0422,  0.0085],
        [-0.0997, -0.0177, -0.0860,  0.0792, -0.0185, -0.0254, -0.0020,  0.0397,
          0.0332, -0.0674,  0.0094],
        [ 0.0233, -0.0631, -0.0658, -0.0941, -0.1878, -0.0330, -0.0459, -0.0116,
          0.0046, -0.0201,  0.0154],
        [-0.0478,  0.0291, -0.0083,  0.0060, -0.0552, -0.0221,  0.0470,  0.0342,
         -0.0521, -0.0443, -0.0057],
        [-0.0217, -0.0273, -0.0340,  0.0308,  0.0112, -0.0344,  0.0070,  0.0040,
         -0.1009,  0.0458, -0.0257],
        [ 0.0348, -0.0267, -0.0263, -0.0796, -0.0094, -0.0240, -0.0121, -0.0398,
          0.0077, -0.0603,  0.0588]], grad_fn=<ViewBackward0>)
原图节点对x: 8 9
边图节点对z: (2, 8) (6, 9)
原图节点对y: 2 6
原图节点对x: 7 8
边图节点对z: (7, 2) (7, 8)
原图节点对y: 2 7
原图节点对x: 0 2
边图节点对z: (0, 4) (5, 2)
原图节点对y: 4 5
原图节点对x: 1 4
边图节点对z: (5, 1) (4, 6)
原图节点对y: 5 6
原图节点对x: 6 0
边图节点对z: (1, 6) (1, 0)
原图节点对y: 1 1
原图节点对x: 5 3
边图节点对z: (5, 1) (3, 6)
原图节点对y: 1 6
原图节点对x: 3 7
节点对齐结果: [[8, 9], [2, 6], [7, 8], [0, 2], [4, 5], [1, 4], [6, 0], [5, 3], [3, 7]]
map_matrix.shape = torch.Size([9, 10])
节点对齐矩阵:
 tensor([[0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]],
       grad_fn=<AsStridedBackward0>)
------------------------------------------------------------------------


count = 3
8116 6035
原图边索引: tensor([[0, 1, 0, 1],
        [1, 0, 0, 1]])
去除自环和反向对的原图边索引: tensor([[0],
        [1]])
原图边索引: tensor([[7, 3, 5, 8, 6, 1, 1, 0, 6, 1, 1, 6, 2, 0, 4, 2, 0, 1, 2, 3, 4, 5, 6, 7,
         8],
        [6, 1, 1, 6, 2, 0, 4, 2, 7, 3, 5, 8, 6, 1, 1, 0, 0, 1, 2, 3, 4, 5, 6, 7,
         8]])
去除自环和反向对的原图边索引: tensor([[7, 3, 5, 8, 6, 1, 1, 0],
        [6, 1, 1, 6, 2, 0, 4, 2]])

n1 = 2
n2 = 9
edge_index_1.shape = torch.Size([2, 4])
edge_index_2.shape = torch.Size([2, 25])
features_1.shape = torch.Size([2, 29])
features_2.shape = torch.Size([9, 29])
tensor([[0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
lg_n1 = 1
lg_n2 = 8
lg_edge_index_mapping_1.shape = torch.Size([2, 1])
lg_edge_index_mapping_2.shape = torch.Size([2, 30])
lg_features_1.shape = torch.Size([2, 29])
lg_features_2.shape = torch.Size([8, 29])
tensor([[0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.]])

map_matrix.shape = torch.Size([2, 9])
map_matrix:
 tensor([[-0.0959,  0.1688, -0.0911,  0.0374,  0.0071,  0.1352, -0.1611, -0.0712,
         -0.0035],
        [ 0.0267, -0.0928,  0.1494, -0.1067, -0.1157, -0.1064,  0.1212,  0.0665,
         -0.0558]], grad_fn=<ViewBackward0>)
lg_map_matrix.shape = torch.Size([1, 8])
lg_map_matrix:
 tensor([[ 0.0006, -0.0541, -0.0107, -0.0478, -0.0754, -0.0462, -0.0346, -0.0735]],
       grad_fn=<ViewBackward0>)
原图节点对x: 0 1
边图节点对z: (0, 1) (1, 5)
原图节点对y: 1 5
节点对齐结果: [[0, 1], [1, 5]]
map_matrix.shape = torch.Size([2, 9])
节点对齐矩阵:
 tensor([[0., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0.]], grad_fn=<AsStridedBackward0>)
------------------------------------------------------------------------


count = 4
93 5650
原图边索引: tensor([[3, 3, 5, 1, 0, 4, 5, 1, 4, 0, 2, 2, 0, 1, 2, 3, 4, 5],
        [5, 1, 4, 0, 2, 2, 3, 3, 5, 1, 0, 4, 0, 1, 2, 3, 4, 5]])
去除自环和反向对的原图边索引: tensor([[3, 3, 5, 1, 0, 4],
        [5, 1, 4, 0, 2, 2]])
原图边索引: tensor([[7, 3, 3, 3, 8, 8, 6, 1, 0, 4, 4, 5, 6, 2, 4, 9, 9, 0, 2, 2, 0, 1, 2, 3,
         4, 5, 6, 7, 8, 9],
        [4, 5, 6, 2, 4, 9, 9, 0, 2, 2, 7, 3, 3, 3, 8, 8, 6, 1, 0, 4, 0, 1, 2, 3,
         4, 5, 6, 7, 8, 9]])
去除自环和反向对的原图边索引: tensor([[7, 3, 3, 3, 8, 8, 6, 1, 0, 4],
        [4, 5, 6, 2, 4, 9, 9, 0, 2, 2]])

n1 = 6
n2 = 10
edge_index_1.shape = torch.Size([2, 18])
edge_index_2.shape = torch.Size([2, 30])
features_1.shape = torch.Size([6, 29])
features_2.shape = torch.Size([10, 29])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.]])
tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
lg_n1 = 6
lg_n2 = 10
lg_edge_index_mapping_1.shape = torch.Size([2, 18])
lg_edge_index_mapping_2.shape = torch.Size([2, 36])
lg_features_1.shape = torch.Size([6, 29])
lg_features_2.shape = torch.Size([10, 29])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.]])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])

map_matrix.shape = torch.Size([6, 10])
map_matrix:
 tensor([[-0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045,
         -0.0045, -0.0045],
        [-0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045,
         -0.0045, -0.0045],
        [-0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045,
         -0.0045, -0.0045],
        [-0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045,
         -0.0045, -0.0045],
        [-0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045,
         -0.0045, -0.0045],
        [-0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045, -0.0045,
         -0.0045, -0.0045]], grad_fn=<ViewBackward0>)
lg_map_matrix.shape = torch.Size([6, 10])
lg_map_matrix:
 tensor([[0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226,
         0.0226],
        [0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226,
         0.0226],
        [0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226,
         0.0226],
        [0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226,
         0.0226],
        [0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226,
         0.0226],
        [0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226, 0.0226,
         0.0226]], grad_fn=<ViewBackward0>)
原图节点对x: 0 0
边图节点对z: (1, 0) (1, 0)
原图节点对y: 1 1
原图节点对x: 2 2
边图节点对z: (4, 2) (2, 0)
原图节点对y: 4 0
原图节点对x: 3 3
边图节点对z: (3, 1) (3, 5)
原图节点对y: 1 5
原图节点对x: 4 4
边图节点对z: (4, 2) (7, 4)
原图节点对y: 2 7
原图节点对x: 5 5
节点对齐结果: [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]
map_matrix.shape = torch.Size([6, 10])
节点对齐矩阵:
 tensor([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.]],
       grad_fn=<AsStridedBackward0>)
------------------------------------------------------------------------


count = 5
1621 20477
原图边索引: tensor([[7, 3, 5, 8, 6, 1, 1, 0, 2, 1, 1, 6, 2, 0, 4, 2, 0, 1, 2, 3, 4, 5, 6, 7,
         8],
        [2, 1, 1, 6, 2, 0, 4, 2, 7, 3, 5, 8, 6, 1, 1, 0, 0, 1, 2, 3, 4, 5, 6, 7,
         8]])
去除自环和反向对的原图边索引: tensor([[7, 3, 5, 8, 6, 1, 1, 0],
        [2, 1, 1, 6, 2, 0, 4, 2]])
原图边索引: tensor([[7, 3, 5, 5, 5, 1, 1, 4, 5, 2, 8, 6, 4, 0, 2, 2, 0, 1, 2, 3, 4, 5, 6, 7,
         8],
        [5, 2, 8, 6, 4, 0, 2, 2, 7, 3, 5, 5, 5, 1, 1, 4, 0, 1, 2, 3, 4, 5, 6, 7,
         8]])
去除自环和反向对的原图边索引: tensor([[7, 3, 5, 5, 5, 1, 1, 4],
        [5, 2, 8, 6, 4, 0, 2, 2]])

n1 = 9
n2 = 9
edge_index_1.shape = torch.Size([2, 25])
edge_index_2.shape = torch.Size([2, 25])
features_1.shape = torch.Size([9, 29])
features_2.shape = torch.Size([9, 29])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
lg_n1 = 8
lg_n2 = 8
lg_edge_index_mapping_1.shape = torch.Size([2, 30])
lg_edge_index_mapping_2.shape = torch.Size([2, 30])
lg_features_1.shape = torch.Size([8, 29])
lg_features_2.shape = torch.Size([8, 29])
tensor([[0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
tensor([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])

map_matrix.shape = torch.Size([9, 9])
map_matrix:
 tensor([[-0.0261, -0.0171,  0.0147, -0.0026,  0.0448, -0.0065, -0.0864, -0.0087,
         -0.0464],
        [ 0.0344, -0.0314, -0.1112, -0.0381,  0.0431,  0.0928,  0.0903, -0.0598,
          0.0079],
        [-0.0105,  0.0577,  0.0326,  0.1831, -0.0214, -0.0555, -0.0869,  0.0676,
          0.0041],
        [-0.0436, -0.0417, -0.1070, -0.0786, -0.0833,  0.2256,  0.1824, -0.0541,
         -0.0019],
        [ 0.0457, -0.0116, -0.0119, -0.0904, -0.0193,  0.0552, -0.0124, -0.0364,
         -0.0290],
        [ 0.0085, -0.0389, -0.0200, -0.1184,  0.1483,  0.0965,  0.0818, -0.0979,
         -0.0123],
        [-0.0114, -0.0538,  0.0023,  0.0314, -0.0059, -0.0623, -0.0472, -0.0207,
          0.0072],
        [ 0.0179,  0.0827,  0.0219,  0.1180, -0.1537, -0.1385, -0.0471,  0.0441,
          0.0073],
        [ 0.0318, -0.0217, -0.0229, -0.0184, -0.0143, -0.0252, -0.0414, -0.0207,
         -0.0425]], grad_fn=<ViewBackward0>)
lg_map_matrix.shape = torch.Size([8, 8])
lg_map_matrix:
 tensor([[-0.0010,  0.0207,  0.0416,  0.0750,  0.0110, -0.0316,  0.0116, -0.0085],
        [-0.0091,  0.0467,  0.0101, -0.0032,  0.0420, -0.0235, -0.0478,  0.0393],
        [-0.0204,  0.0615, -0.0135, -0.0891, -0.0376, -0.0292, -0.0253,  0.0426],
        [-0.0214, -0.0752, -0.0181, -0.0160, -0.0956, -0.0285, -0.0973, -0.1332],
        [-0.0365,  0.0983, -0.0274, -0.0984,  0.0309, -0.0058, -0.0600,  0.1040],
        [ 0.0323, -0.0011, -0.0037, -0.0270, -0.0340,  0.0021,  0.0072, -0.0277],
        [ 0.0021, -0.0495,  0.0062, -0.0212,  0.0368, -0.0472, -0.0920, -0.0736],
        [-0.0111, -0.0988,  0.0456,  0.0275, -0.0686,  0.0240,  0.0224, -0.1266]],
       grad_fn=<ViewBackward0>)
原图节点对x: 3 5
边图节点对z: (3, 1) (5, 8)
原图节点对y: 1 8
原图节点对x: 2 3
边图节点对z: (7, 2) (3, 2)
原图节点对y: 7 2
原图节点对x: 5 4
边图节点对z: (1, 5) (2, 4)
原图节点对y: 1 2
原图节点对x: 4 0
边图节点对z: (1, 4) (1, 0)
原图节点对y: 1 1
原图节点对x: 0 7
边图节点对z: (1, 0) (7, 5)
原图节点对y: 1 5
原图节点对x: 8 1
边图节点对z: (8, 6) (1, 0)
原图节点对y: 6 0
原图节点对x: 6 6
节点对齐结果: [[3, 5], [1, 8], [2, 3], [7, 2], [5, 4], [4, 0], [0, 7], [8, 1], [6, 6]]
map_matrix.shape = torch.Size([9, 9])
节点对齐矩阵:
 tensor([[0., 0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 1.],
        [0., 0., 0., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<AsStridedBackward0>)
------------------------------------------------------------------------


count = 6
2479 3759
原图边索引: tensor([[7, 3, 5, 6, 1, 0, 0, 5, 0, 1, 2, 0, 4, 2, 0, 1, 2, 3, 4, 5, 6, 7],
        [5, 0, 1, 2, 0, 4, 2, 7, 3, 5, 6, 1, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7]])
去除自环和反向对的原图边索引: tensor([[7, 3, 5, 6, 1, 0, 0],
        [5, 0, 1, 2, 0, 4, 2]])
原图边索引: tensor([[7, 7, 3, 3, 5, 8, 6, 1, 1, 4, 5, 8, 5, 1, 4, 6, 4, 0, 2, 2, 0, 1, 2, 3,
         4, 5, 6, 7, 8],
        [5, 8, 5, 1, 4, 6, 4, 0, 2, 2, 7, 7, 3, 3, 5, 8, 6, 1, 1, 4, 0, 1, 2, 3,
         4, 5, 6, 7, 8]])
去除自环和反向对的原图边索引: tensor([[7, 7, 3, 3, 5, 8, 6, 1, 1, 4],
        [5, 8, 5, 1, 4, 6, 4, 0, 2, 2]])

n1 = 8
n2 = 9
edge_index_1.shape = torch.Size([2, 22])
edge_index_2.shape = torch.Size([2, 29])
features_1.shape = torch.Size([8, 29])
features_2.shape = torch.Size([9, 29])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
tensor([[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
lg_n1 = 7
lg_n2 = 10
lg_edge_index_mapping_1.shape = torch.Size([2, 25])
lg_edge_index_mapping_2.shape = torch.Size([2, 38])
lg_features_1.shape = torch.Size([7, 29])
lg_features_2.shape = torch.Size([10, 29])
tensor([[0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
tensor([[0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])

map_matrix.shape = torch.Size([8, 9])
map_matrix:
 tensor([[ 0.1316,  0.0988,  0.0336,  0.0227, -0.1900, -0.0594, -0.0297, -0.0356,
          0.0026],
        [-0.0715, -0.0719, -0.0337, -0.0356, -0.0421, -0.0008, -0.0444,  0.0708,
          0.0159],
        [-0.1100, -0.1586, -0.0712, -0.0109,  0.0144, -0.0282, -0.0249, -0.0790,
         -0.0709],
        [ 0.0201, -0.1213, -0.1471,  0.0647,  0.1724,  0.0277,  0.1112, -0.0533,
         -0.0075],
        [ 0.0117,  0.0153,  0.0680, -0.0519, -0.0557, -0.0103, -0.0805,  0.0706,
          0.0025],
        [-0.0075,  0.0763,  0.0198,  0.0703, -0.1052, -0.0152, -0.0742, -0.0475,
         -0.0961],
        [-0.0155, -0.0238, -0.0596,  0.0181, -0.0223,  0.0462, -0.0503,  0.0307,
         -0.0467],
        [ 0.0707, -0.0093, -0.0795, -0.0024,  0.0754, -0.0360,  0.0510, -0.0584,
         -0.0299]], grad_fn=<ViewBackward0>)
lg_map_matrix.shape = torch.Size([7, 10])
lg_map_matrix:
 tensor([[-0.0760, -0.2263, -0.1146, -0.0114, -0.0783, -0.1126,  0.0039, -0.0418,
         -0.1792, -0.0167],
        [-0.0369,  0.0046,  0.0020, -0.0067, -0.0081,  0.0027, -0.0762, -0.0327,
          0.0034,  0.0316],
        [-0.0751,  0.0248,  0.0694,  0.0135, -0.0016, -0.1154,  0.0231, -0.0459,
          0.0437, -0.1202],
        [ 0.0160,  0.0187,  0.0563, -0.0466,  0.0169,  0.0500, -0.0431,  0.0192,
         -0.0210,  0.0437],
        [-0.0128,  0.0098,  0.0526, -0.0282, -0.0088,  0.0012, -0.0223,  0.0828,
          0.0096, -0.0600],
        [-0.0719, -0.0956, -0.0894, -0.0661,  0.0153, -0.0357,  0.0158,  0.0566,
         -0.0262, -0.0393],
        [-0.0199,  0.0049, -0.0117, -0.0243, -0.0097,  0.0030, -0.0005, -0.0144,
         -0.0074, -0.0294]], grad_fn=<ViewBackward0>)
原图节点对x: 3 4
边图节点对z: (3, 0) (4, 6)
原图节点对y: 0 6
原图节点对x: 5 1
边图节点对z: (5, 1) (1, 2)
原图节点对y: 1 2
原图节点对x: 7 0
边图节点对z: (7, 5) (1, 0)
原图节点对y: 5 1
原图节点对x: 4 7
边图节点对z: (0, 4) (7, 8)
原图节点对y: 0 8
原图节点对x: 6 5
边图节点对z: (6, 2) (5, 3)
原图节点对y: 2 3
节点对齐结果: [[3, 4], [0, 6], [5, 1], [1, 2], [7, 0], [4, 7], [6, 5], [2, 3]]
map_matrix.shape = torch.Size([8, 9])
节点对齐矩阵:
 tensor([[0., 0., 0., 0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0., 0., 0., 0.]], grad_fn=<AsStridedBackward0>)
------------------------------------------------------------------------



tensor(0.1022, grad_fn=<MseLossBackward0>) tensor(39.2459, grad_fn=<DivBackward1>)
------------------------------------
tensor(0.1321, grad_fn=<MseLossBackward0>) tensor(35.1495, grad_fn=<DivBackward1>)
------------------------------------
tensor(0.3237, grad_fn=<MseLossBackward0>) tensor(2.9891, grad_fn=<DivBackward1>)
------------------------------------
tensor(0.1080, grad_fn=<MseLossBackward0>) tensor(20.3203, grad_fn=<DivBackward1>)
------------------------------------
tensor(1.0254e-07, grad_fn=<MseLossBackward0>) tensor(28.4612, grad_fn=<DivBackward1>)
------------------------------------
tensor(0.1049, grad_fn=<MseLossBackward0>) tensor(28.0838, grad_fn=<DivBackward1>)
------------------------------------
tensor(0.0896, grad_fn=<MseLossBackward0>) tensor(25.7063, grad_fn=<DivBackward1>)
------------------------------------
tensor(0.0593, grad_fn=<MseLossBackward0>) tensor(23.1417, grad_fn=<DivBackward1>)
------------------------------------
tensor(0.2195, grad_fn=<MseLossBackward0>) tensor(37.2122, grad_fn=<DivBackward1>)
------------------------------------
tensor(0.1843, grad_fn=<MseLossBackward0>) tensor(31.8578, grad_fn=<DivBackward1>)
------------------------------------
tensor(0.1040, grad_fn=<MseLossBackward0>) tensor(29.5539, grad_fn=<DivBackward1>)
------------------------------------
tensor(0.1091, grad_fn=<MseLossBackward0>) tensor(31.0039, grad_fn=<DivBackward1>)
------------------------------------
tensor(0.3417, grad_fn=<MseLossBackward0>) tensor(11.5687, grad_fn=<DivBackward1>)
------------------------------------
tensor(0.0239, grad_fn=<MseLossBackward0>) tensor(21.7326, grad_fn=<DivBackward1>)
------------------------------------
tensor(0.2794, grad_fn=<MseLossBackward0>) tensor(14.7595, grad_fn=<DivBackward1>)